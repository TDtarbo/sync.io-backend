datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Freelancer {
    id             String   @id @default(uuid())
    firstName      String
    lastName       String
    profilePicture String?  @db.Text
    email          String   @unique
    createdAt      DateTime @default(now())

    freelancerProject FreelancerProject[] @relation("person")
    whoAddThisGuy     FreelancerProject[] @relation("added_person")

    project Project[]

    freelancerTask FreelancerTask[]
}

model Project {
    id          String   @id @default(uuid())
    title       String
    description String?
    dueDate     DateTime
    createdAt   DateTime @default(now())
    createdBy   String

    freelancerProject FreelancerProject[]

    publicLink PublicLink?

    freelancer Freelancer @relation(fields: [createdBy], references: [id])

    mileStone MileStone[]
}

model FreelancerProject {
    freelancerId        String
    addedByFreelancerId String
    projectId           String
    role                String

    freelancer    Freelancer @relation("person", fields: [freelancerId], references: [id])
    whoAddThisGuy Freelancer @relation("added_person", fields: [addedByFreelancerId], references: [id])

    project Project @relation(fields: [projectId], references: [id])

    @@id([freelancerId, projectId])
}

model PublicLink {
    id           String   @id @default(uuid())
    status       String
    publicHash   String
    lastAccessed DateTime

    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @unique
}

model MileStone {
    id        String   @id @default(uuid())
    title     String
    createdAt DateTime @default(now())
    state     String

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    task Task[]
}

model Task {
    id        String   @id @default(uuid())
    title     String
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime
    dueDate   DateTime
    state     String
    priority  String

    mileStone   MileStone @relation(fields: [milestoneID], references: [id])
    milestoneID String

    freelancerTask FreelancerTask[]
}

model FreelancerTask {
    freelancerId String
    taskId       String
    createdAt    DateTime @default(now())

    freelancer Freelancer @relation(fields: [freelancerId], references: [id])
    task       Task       @relation(fields: [taskId], references: [id])

    @@id([freelancerId, taskId])
}
